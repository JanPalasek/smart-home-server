@using SmartHome.DomainCore.Data.Models
@using Syncfusion.EJ2.Navigations
@inject SmartHome.DomainCore.ServiceInterfaces.Permission.IGetPermissionsService GetPermissionsService

@{
    bool isAuthenticated = User.Identity.IsAuthenticated;
    
    HashSet<string> userPermissions = isAuthenticated ?
        GetPermissionsService.GetAllUserPermissionsAsync(User.Identity.Name!)
            .Result.Select(x => x.Name!).ToHashSet() : new HashSet<string>();
}

@functions{
    private bool HasPermission(HashSet<string> userPermissions, string permissionName)
    {
        return userPermissions.Contains(permissionName);
    }
}

<style>
    .menu>div:nth-child(2) {
        float: right;
    }
</style>


@{
    
    var leftMenuItems = new List<MenuItem>();
    leftMenuItems.Add(new MenuItem
    {
        Text = "Home",
        Url = Url.Action("Overview", "Home")
    });
    leftMenuItems.Add(new MenuItem()
    {
        Text = "Statistics"
    });

    if (isAuthenticated && HasPermission(userPermissions, "File.View"))
    {
        leftMenuItems.Add(new MenuItem()
        {
            Text = "Files",
            Url = Url.Action("Files", "Home")
        });
    }

    if (isAuthenticated && HasPermission(userPermissions, "Enumeration.View"))
    {
        var enumerations = new List<MenuItem>();
        if (HasPermission(userPermissions, "Enumeration.BatteryPowerSourceType.View"))
        {
            enumerations.Add(new MenuItem() {Text = "Battery power source types", Url = Url.Action("List", "BatteryPowerSourceType")});
        }
        if (HasPermission(userPermissions, "Enumeration.Place.View"))
        {
            enumerations.Add(new MenuItem() { Text = "Places", Url = Url.Action("List", "Place") });
        }
        if (HasPermission(userPermissions, "Enumeration.Sensor.View"))
        {
            enumerations.Add(new MenuItem() { Text = "Sensors", Url = Url.Action("List", "Sensor")});
        }
        if (HasPermission(userPermissions, "Enumeration.SensorType.View"))
        {
            enumerations.Add(new MenuItem() { Text = "Sensor types", Url = Url.Action("List", "SensorType") });
        }
        
        leftMenuItems.Add(new MenuItem()
        {
            Text = "Enumerations",
            Items = enumerations
        });
    }

    if (isAuthenticated && HasPermission(userPermissions, "Measurement.View"))
    {
        var measurements = new List<MenuItem>();
        if (HasPermission(userPermissions, "Measurement.Temperature.View"))
        {
            measurements.Add(new MenuItem() {Text = "Temperature", Url = Url.Action("List", "TemperatureMeasurement")});
        }

        leftMenuItems.Add(new MenuItem()
        {
            Text = "Measurements",
            Items = measurements
        });
    }
    if (isAuthenticated && HasPermission(userPermissions, "Administration.View"))
    {
        var administration = new List<MenuItem>();
        if (HasPermission(userPermissions, "Administration.User.ViewAll"))
        {
            administration.Add(new MenuItem() { Text = "Users", Url = Url.Action("List", "User") });
        }
        if (HasPermission(userPermissions, "Administration.Role.View"))
        {
            administration.Add(new MenuItem() { Text = "Roles", Url = Url.Action("List", "Role")});
        }
        if (HasPermission(userPermissions, "Administration.Permission.View"))
        {
            administration.Add(new MenuItem() { Text = "Permissions", Url = Url.Action("List", "Permission")});
        }

        leftMenuItems.Add(new MenuItem()
        {
            Text = "Administration",
            Items = administration
        });
    }

    var rightMenuItems = new List<MenuItem>();
    if (isAuthenticated)
    {
        rightMenuItems.Add(new MenuItem()
        {
            Text = "Account",
            Items = new List<MenuItem>()
            {
                new MenuItem() {Text = "Settings", Url = Url.Action("Detail", "Account")},
                new MenuItem() {Text = "Log Out", Url = Url.Action("LogOut", "Account")}
            }
        });
    }
    else
    {
        rightMenuItems.Add(new MenuItem()
        {
            Text = "Log In",
            Url = Url.Action("Login", "Account")
        });
    }
}
<div class="menu-control menu small-hide">
    <ejs-menu id="main-menu-left" items="leftMenuItems" showItemOnClick="true"></ejs-menu>
    <ejs-menu id="main-menu-right" items="rightMenuItems" showItemOnClick="true"></ejs-menu>
</div>

@{
    var items = leftMenuItems.Concat(rightMenuItems).ToList();
}

<div class="menu-control menu small-show">
    <ejs-menu id="main-menu-left-hamburger" items="items" hamburgerMode="true" showItemOnClick="true"></ejs-menu>
</div>